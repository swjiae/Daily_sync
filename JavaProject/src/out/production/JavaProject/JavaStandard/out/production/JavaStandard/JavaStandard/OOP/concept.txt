// 객체지향언어
    // 코드의 재사용성이 높고 유지보수가 용이, 중복 코드 제거
    // 프로그래밍 언어 + 객체지향 개념
    // 특징
        // 상속 : 클래스의 멤버를 재사용할 수 있도록 기능
        // 추상화 : 복잡한 것은 숨기고, 핵심만 노출
        // 캡슐화 : 객체 내부의 정보를 보호하기 위해 접근을 제어 (public/protected/default/private)
        // ★다형성 : 동일한 이름을 가진 메서드가 클래스와 객체에 따라 다르게 동작 (overriding, overloading)


// 클래스(설계도)와 객체(제품)
    // 객체(실체) --추상화--> 클래스(설계도) --구체화--> 객체(인스턴스)

// 객체의 구성요소
    // 객체(실체)
        // 속성
        // 기능
    // 객체(인스턴스)
        // 변수
        // 메서드

// 객체의 생성과 사용
    // 순서
        // 클래스 작성
            // 멤버
                // 변수
                // 메서드
        // 객체의 생성
            // 클래스명 변수명; - 리모콘
            // 변수명 = new 클래스명(); - Tv
            // Tv t = new Tv();
                // 객체(속 멤버)를 사용하려면 참조변수가 필요
                // 메모리(Heap)에 공간 형성 후 대입연산자로 참조변수와 연결
                // 클래스도 하나의 데이터 타입
        // 객체의 사용
            // t.var = 7;
            // t.method();

// 객체 배열
    // == 참조변수 배열

    // Tv[] tvArr = new Tv[3];
    // tvArr[0] = new Tv();
    // tvArr[1] = new Tv();
    // tvArr[2] = new Tv();

    // Tv[] tvArr =  {new Tv(), new Tv(), new Tv()};

// 클래스의 정의
    // 1. 설계도
    // 2. 데이터+함수 (변수+메서드)
    // 3. 사용자정의 데이터타입

// 선언위치에 따른 변수의 종류
    // 클래스 영역 - 변수, 메서드 선언문만 가능
        // 클래스 변수 - 클래스가 메모리에 올라갈 때 생성 (객체 생성 X)
            static int cv;
        // 인스턴스 변수 - ★ 인스턴스가 생성되었을 때 생성 (객체 생성 O)
            int iv;
    // 메서드 영역
        // 지역 변수 - 변수 선언문이 수행되었을 때 생성 ~ method scope안에서만 유효
            int lv = 0;

// 클래스 변수와 인스턴스 변수
    // 클래스 변수
        // 공통 속성 SSAFY
    // 인스턴스 변수
        // 개별 속성 김지애
    // 변수 생성
        class Card {
            // cv 생성
            static int width = 100;
            static int height = 250;
            // iv 생성
            String kind;
            int number;
        }
    // 변수 사용
        // cv 사용 - c.width 도 가능하지만 지양. 클래스 이름 지향.
        Card.width = 200;
        Card.height = 300;
        // iv 사용
        c.kind = "HEART";
        c.number = 5;

// 메서드
    // 장점
        // 중복 코드 제거
        // 관리 용이
        // 재사용성
    // 구성
        // 선언부
            반환타입 메서드이름 (타입 변수명, ...)
            int add(int a, int b)
        // 구현부
            {
                메서드 호출 시 수행될 코드
                출력은 최대 1개
                반환이 없을 때 반환타입 == void
            }
        // 지역변수 : 메서드 내에 선언된 변수로 메서드 내에서만 유효
        // 반환값 (return value) : 반환타입이 void가 아닐 때 항상 존재해야 함.

    // call stack
        // 메서드 수행에 필요한 메모리가 제공되는 공간
        // 메서드가 호출되면 호출스택에 메모리 할당, 종료되면 해제
        // 맨 위의 메서드 하나만 실행중, 나머지는 대기중

    // 매개변수 타입
        // 기본형
            // read only
        // 참조형 - 객체의 주소 매개, 반환
            // read & write

    // 메서드 종류 (iv 사용 여부에 따라)
        // class(static) method
            // 객체 생성 없이, 클래스이름.메서드이름()
            // ★ iv 사용 X
        // instance method
            // 객체 생성 후, 참조변수.메서드이름()
            // iv 사용 O

    // static은 언제 붙이는가?
        // 속성(변수) 중에서 공통 속성에
        // 인스턴스 멤버를 사용하지 않는 메서드에

// overloading
    // 한 클래스 안에 같은 이름의 메서드 여러개 정의
    // 3가지 성립조건
        // 1. 메서드 이름이 같아야 한다.
        // 2. 매개변수의 개수 또는 타입이 달라야 한다.
        // 3. 반환 타입은 영향없다.
        // implicit conversion 주의

// constructor (생성자)
    // 인스턴스가 생성될 때마다 호출되는 'iv 초기화 메서드'
        // 인스턴스 == 객체 == iv의 묶음
        // 초기화 == 값의 할당
        // 생성자 overloading 가능
    // 규칙
        // 생성자의 이름은 클래스 이름과 같아야 한다.
        // 리턴값이 없다. (void 생략)
        // 모든 클래스는 반드시 한 개 이상의 생성자를 가져야 함
    // 종류
        // 기본생성자
            // 매개변수가 없는 생성자
            // 클래스이름() {}
            // 생성자가 하나도 없을 때만 컴파일러가 자동 추가
            // 클래스 정의할 때 습관적으로 작성하기

// 생성자 this()
    // 생성자에서 다른 생성자 호출할 때 사용
    // 다른 생성자 호출 시 ★첫 줄에서만 사용가능

// 참조변수 this
    // 인스턴스(객체) 자신을 가리키는 참조변수
        // 인스턴스의 주소가 저장되어 있음
        // 모든 인스턴스 메서드에 지역변수로 숨겨진 채로 존재
        // 클래스 메서드에서는 사용 불가
    // 인스턴스 메서드(생성자 포함)에서 사용가능
    // lv와 iv를 구별할 때 사용

// 변수의 초기화
    // 지역변수(lv)
        // call stack 자리 재사용 -> 값이 이미 들어있음 -> 수동 초기화 필수
    // 멤버변수(iv, cv)
        // 1. 자동 초기화 => 0
        // 2. 간단 초기화 => 명시적 초기화 (=)
            class Car {
                int door = 4; // 기본형 변수의 초기화
                Car c = new Car(); // 참조형 변수의 초기화
            }
        // 3. 복잡 초기화 => 초기화 블럭, 생성자
            // iv : 초기화 블럭 {} && 생성자
            // cv : 초기화 블럭 static {}
    // 초기화 시점
        // cv : 클래스가 처음 로딩될 때 단 한 번
        // iv : 인스턴스가 생성될 때 마다
        // lv :